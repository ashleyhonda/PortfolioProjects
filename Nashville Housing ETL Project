USE PortfolioProject;

SELECT * FROM NashvilleHousing;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Standardizing Date Format
SELECT SaleDate, CONVERT(DATE, SaleDate) 
FROM NashvilleHousing;

UPDATE NashvilleHousing
SET SaleDate = CONVERT(Date, SaleDate);

ALTER TABLE NashvilleHousing
ADD SaleDateConverted Date;

UPDATE NashvilleHousing
SET SaleDateConverted = CONVERT(Date, SaleDate);

SELECT SaleDateConverted
FROM NashvilleHousing;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Populate Property Address Data
-- There was null values in the property address, however, there are duplicates in the ParcelID meaning addresses could potentially link up together
SELECT *
FROM NashvilleHousing
WHERE PropertyAddress is NULL;

SELECT * 
FROM NashvilleHousing
ORDER BY ParcelID;

-- using a self join to ensure that our prediction of duplicate parcelID means same property address, then adding comparing it to the null property addresses
SELECT nash1.ParcelID, nash1.PropertyAddress, nash2.ParcelID, nash2.PropertyAddress
FROM NashvilleHousing nash1
JOIN NashvilleHousing nash2
	ON nash1.ParcelID = nash2.ParcelID
	AND nash1.[UniqueID ] <> nash2.[UniqueID ]
WHERE nash1.PropertyAddress IS NULL;

SELECT nash1.ParcelID, nash1.PropertyAddress, nash2.ParcelID, nash2.PropertyAddress, ISNULL(nash1.PropertyAddress, nash2.PropertyAddress) as property_address_example
FROM NashvilleHousing nash1
JOIN NashvilleHousing nash2
	ON nash1.ParcelID = nash2.ParcelID
	AND nash1.[UniqueID ] <> nash2.[UniqueID ]
WHERE nash1.PropertyAddress IS NULL;

UPDATE nash1
SET PropertyAddress = ISNULL(nash1.PropertyAddress, nash2.PropertyAddress)
FROM NashvilleHousing nash1
JOIN NashvilleHousing nash2
	ON nash1.ParcelID = nash2.ParcelID
	AND nash1.[UniqueID ] <> nash2.[UniqueID ]
WHERE nash1.PropertyAddress IS NULL;

SELECT nash1.ParcelID, nash1.PropertyAddress, nash2.ParcelID, nash2.PropertyAddress, ISNULL(nash1.PropertyAddress, nash2.PropertyAddress) as property_address_example
FROM NashvilleHousing nash1
JOIN NashvilleHousing nash2
	ON nash1.ParcelID = nash2.ParcelID
	AND nash1.[UniqueID ] <> nash2.[UniqueID ];

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Breaking Address into Individual Columns (Address, City, State)

SELECT propertyaddress, OwnerAddress
FROM NashvilleHousing;

SELECT 
SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1) as Address,
SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(propertyaddress)) as City
FROM NashvilleHousing;

ALTER TABLE NashvilleHousing
ADD PropertyAddress_Fixed Nvarchar(255);

UPDATE NashvilleHousing
SET PropertyAddress_Fixed = SUBSTRING(PropertyAddress, 1, CHARINDEX(',', PropertyAddress)-1);

ALTER TABLE NashvilleHousing
ADD PropertyAddress_City Nvarchar(255);

UPDATE NashvilleHousing
SET PropertyAddress_City = SUBSTRING(PropertyAddress, CHARINDEX(',', PropertyAddress)+1, LEN(propertyaddress));

SELECT PropertyAddress_Fixed, PropertyAddress_City
FROM NashvilleHousing;

-- Updating Owner Address using parsename

SELECT 
PARSENAME(REPLACE(owneraddress, ',', '.'),3) as owneraddress,
PARSENAME(REPLACE(owneraddress, ',', '.'),2) as city,
PARSENAME(REPLACE(owneraddress, ',', '.'),1) as state
FROM NashvilleHousing

ALTER TABLE NashvilleHousing
ADD OwnerSplitAddress Nvarchar(255);

ALTER TABLE NashvilleHousing
ADD OwnerSplitCity Nvarchar(255);

ALTER TABLE NashvilleHousing
ADD OwnerSplitState Nvarchar(255);

UPDATE NashvilleHousing
SET OwnerSplitAddress = PARSENAME(REPLACE(owneraddress, ',', '.'),3);

UPDATE NashvilleHousing
SET OwnerSplitCity = PARSENAME(REPLACE(owneraddress, ',', '.'),2);

UPDATE NashvilleHousing
SET OwnerSplitState = PARSENAME(REPLACE(owneraddress, ',', '.'),1);

SELECT OwnerSplitAddress, OwnerSplitCity, OwnerSplitState
FROM NashvilleHousing;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Change Y and N to Yes and No in "Sold as Vacant Field"
SELECT Distinct(SoldAsvacant)
FROM NashvilleHousing;

SELECT SoldAsVacant,
CASE When SoldAsvacant = 'Y' THEN 'YES'
	 When SoldAsvacant = 'N' THEN 'NO'
ELSE SoldasVacant
END
FROM NashvilleHousing;

UPDATE NashvilleHousing
SET SoldAsVacant = CASE When SoldAsvacant = 'Y' THEN 'YES'
	 When SoldAsvacant = 'N' THEN 'NO'
ELSE SoldasVacant
END;

---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Remove Duplicates
-- Not a standard practice to ever delete any data, but shown for the purpose of the video

WITH RowNumCTE as(
SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY UniqueID
				 ) as row_num
FROM NashvilleHousing
)

DELETE
FROM RowNumCTE
WHERE row_num > 1
;

WITH RowNumCTE as(
SELECT *,
	ROW_NUMBER() OVER (
	PARTITION BY ParcelID,
				 PropertyAddress,
				 SalePrice,
				 SaleDate,
				 LegalReference
				 ORDER BY UniqueID
				 ) as row_num
FROM NashvilleHousing
)

SELECT *
FROM RowNumCTE
WHERE row_num > 1
;
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Delete Unused Columns
-- Also not a best practice 

SELECT PropertyAddress, TaxDistrict, SaleDate, OwnerAddress
FROM NashvilleHousing;

ALTER TABLE NashvilleHousing
DROP COLUMN OwnerAddress, TaxDistrict, PropertyAddress, SaleDate;
